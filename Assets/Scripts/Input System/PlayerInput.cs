//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/PlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInput"",
    ""maps"": [
        {
            ""name"": ""Android"",
            ""id"": ""2255b2a6-dc5a-4907-9f61-1d23ab874cc8"",
            ""actions"": [
                {
                    ""name"": ""ScreenTouch"",
                    ""type"": ""Value"",
                    ""id"": ""a9ea29b5-47b4-43f6-a601-05312e476b73"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""d04319d3-c4e4-424a-ad19-b2f522e088cf"",
                    ""path"": ""<Touchscreen>/primaryTouch/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ScreenTouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Android
        m_Android = asset.FindActionMap("Android", throwIfNotFound: true);
        m_Android_ScreenTouch = m_Android.FindAction("ScreenTouch", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Android
    private readonly InputActionMap m_Android;
    private List<IAndroidActions> m_AndroidActionsCallbackInterfaces = new List<IAndroidActions>();
    private readonly InputAction m_Android_ScreenTouch;
    public struct AndroidActions
    {
        private @PlayerInput m_Wrapper;
        public AndroidActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @ScreenTouch => m_Wrapper.m_Android_ScreenTouch;
        public InputActionMap Get() { return m_Wrapper.m_Android; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(AndroidActions set) { return set.Get(); }
        public void AddCallbacks(IAndroidActions instance)
        {
            if (instance == null || m_Wrapper.m_AndroidActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_AndroidActionsCallbackInterfaces.Add(instance);
            @ScreenTouch.started += instance.OnScreenTouch;
            @ScreenTouch.performed += instance.OnScreenTouch;
            @ScreenTouch.canceled += instance.OnScreenTouch;
        }

        private void UnregisterCallbacks(IAndroidActions instance)
        {
            @ScreenTouch.started -= instance.OnScreenTouch;
            @ScreenTouch.performed -= instance.OnScreenTouch;
            @ScreenTouch.canceled -= instance.OnScreenTouch;
        }

        public void RemoveCallbacks(IAndroidActions instance)
        {
            if (m_Wrapper.m_AndroidActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IAndroidActions instance)
        {
            foreach (var item in m_Wrapper.m_AndroidActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_AndroidActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public AndroidActions @Android => new AndroidActions(this);
    public interface IAndroidActions
    {
        void OnScreenTouch(InputAction.CallbackContext context);
    }
}
